-- 1. How many transactions were completed during each marketing campaign?

SELECT mc.campaign_id, mc.campaign_name, mc.start_date, mc.end_date,
	COUNT(t.transaction_id) AS transaction_count
FROM marketing_campaigns mc
	JOIN transactions t ON t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_id, mc.campaign_name, mc.start_date, mc.end_date;

-- 2. Which product had the highest sales quantity?

SELECT sc.product_id, sc.product_name,
	SUM(t.quantity) AS highest_sales_quantity
FROM transactions t 
	INNER JOIN sustainable_clothing sc USING(product_id)
GROUP BY sc.product_id, sc.product_name
ORDER BY highest_sales_quantity DESC
LIMIT 1;

-- 3. What is the total revenue generated from each marketing campaign?

SELECT mc.campaign_name, 
	ROUND(SUM(t.quantity * sc.price),2) AS total_revenue
FROM marketing_campaigns mc
	JOIN transactions t USING(product_id)
	JOIN sustainable_clothing sc USING(product_id)
GROUP BY mc.campaign_name;

-- 4. What is the top-selling product category based on the total revenue generated?

SELECT sc.category, 
	ROUND(SUM(t.quantity * sc.price),2) AS total_revenue
FROM transactions t 
	INNER JOIN sustainable_clothing sc USING(product_id)
GROUP BY sc.category
ORDER BY total_revenue DESC
LIMIT 1;

-- 5. Which products had a higher quantity sold compared to the average quantity sold?

SELECT sc.product_name, t.quantity
FROM transactions t
	JOIN sustainable_clothing sc USING(product_id)
WHERE t.quantity > (
  SELECT AVG(quantity) 
  FROM transactions
);

-- 6. What is the average revenue generated per day during the marketing campaigns?

SELECT ROUND(AVG(t.quantity * sc.price),2) AS average_revenue_per_day
FROM transactions t
	JOIN sustainable_clothing sc USING(product_id)
	JOIN marketing_campaigns mc USING(product_id)
WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date;

-- 7. What is the percentage contribution of each product to the total revenue?

WITH total_revenue AS (
	SELECT SUM(t.quantity*sc.price) AS overall_revenue
    FROM transactions t
		JOIN sustainable_clothing sc USING(product_id)
        ),
product_revenue AS (
	SELECT sc.product_name, 
		SUM(t.quantity*sc.price) AS revenue_product
    FROM transactions t
		JOIN sustainable_clothing sc USING(product_id)
	GROUP BY sc.product_name
    )
SELECT pr.product_name,
	ROUND((pr.revenue_product/tr.overall_revenue)*100,2) AS percentage_cotribution
FROM total_revenue tr, product_revenue pr
ORDER BY percentage_cotribution DESC;

-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns.

WITH campaign_quantity AS (
    SELECT AVG(t.quantity) AS avg_quantity_campaign
    FROM transactions t
		JOIN marketing_campaigns mc USING(product_id)
),
non_campaign_quantity AS (
    SELECT AVG(t.quantity) AS avg_quantity_non_campaign
    FROM transactions t
		LEFT JOIN marketing_campaigns mc USING(product_id)
    WHERE mc.product_id IS NULL
)
SELECT cq.avg_quantity_campaign AS average_quantity_during_campaigns,
       ncq.avg_quantity_non_campaign AS average_quantity_outside_campaigns
FROM campaign_quantity cq, non_campaign_quantity ncq;

-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns

WITH campaign_revenue AS (
    SELECT ROUND(SUM(t.quantity*sc.price),2) AS totalrevenue_campaign
    FROM transactions t
		JOIN sustainable_clothing sc USING(product_id)
		JOIN marketing_campaigns mc USING(product_id)
),
non_campaign_revenue AS (
    SELECT ROUND(SUM(t.quantity*sc.price),2) AS totalrevenue_non_campaign
    FROM transactions t
		JOIN sustainable_clothing sc USING(product_id)
		LEFT JOIN marketing_campaigns mc USING(product_id)
    WHERE mc.product_id IS NULL
)
SELECT cr.totalrevenue_campaign AS total_revenue_during_campaigns,
       ncr.totalrevenue_non_campaign AS total_revenue_outside_campaigns
FROM campaign_revenue cr, non_campaign_revenue ncr;

-- 10. Rank the products by their average daily quantity sold.

WITH daily_quantity AS (
    SELECT product_id, 
		ROUND(AVG(quantity),2) AS avg_daily_quantity
    FROM transactions
    GROUP BY product_id
)
SELECT product_id, avg_daily_quantity,
       DENSE_RANK() OVER (ORDER BY avg_daily_quantity DESC) AS 'Rank'
FROM daily_quantity
ORDER BY 'Rank';



	










